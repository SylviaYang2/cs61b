Q: Is one sorting algorithm always faster than another?
A: The CountingSorter is always running faster than the others.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: InsertionSorter is always the fastest, and WipingBubbleSorter is in the middle and the BubbleSorter
is always the lowest. Since N^2 is only the dominating term, there might be other terms that would affect the result.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: When the array size is small, the plot isn't showing their actual respective runtime conpared to their
asymptotical bounds. When array size gets larger and larger, JavaSorter and CountingSorter have nearly
identical performances.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: Not necessarily. When I input different number of trials with the same BY number and number of repetitions,
it appears that increasing the array size does not always mean the sorting takes longer.

Q: How does changing nrepeats change the plot?
A: The plot is smoother, especially for small sizes of arrays.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No, they are not exactly the same, and in fact, they differ a lot.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: